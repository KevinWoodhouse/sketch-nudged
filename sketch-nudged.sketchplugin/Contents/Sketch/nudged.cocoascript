/*
  Project: Nudged - A Sketch Plugin to easily edit your nudge distance settings.
  Author: Kevin Woodhouse
  Twitter: @Kevin_Woodhouse
  Web: www.kevinwoodhouse.com
  -----------------------------
  Twitter: @SketchNudged
  Support: https://kevinwoodhouse.github.io/sketch-nudged/
  Version: 2.0.2 - Mocha Frappuccino
*/


/* globals NSUUID MOClassDescription NSObject NSSelectorFromString NSClassFromString */

var index$1 = function (selectorHandlerDict, superclass) {
  var uniqueClassName = 'MochaJSDelegate_DynamicClass_' + NSUUID.UUID().UUIDString();

  var delegateClassDesc = MOClassDescription.allocateDescriptionForClassWithName_superclass_(uniqueClassName, superclass || NSObject);

  delegateClassDesc.registerClass();

  // Storage Handlers
  var handlers = {};

  // Define interface
  this.setHandlerForSelector = function (selectorString, func) {
    var handlerHasBeenSet = selectorString in handlers;
    var selector = NSSelectorFromString(selectorString);

    handlers[selectorString] = func;

    /*
      For some reason, Mocha acts weird about arguments: https://github.com/logancollins/Mocha/issues/28
      We have to basically create a dynamic handler with a likewise dynamic number of predefined arguments.
    */
    if (!handlerHasBeenSet) {
      var args = [];
      var regex = /:/g;
      while (regex.exec(selectorString)) {
        args.push('arg' + args.length);
      }

      var dynamicFunction = eval('(function (' + args.join(', ') + ') { return handlers[selectorString].apply(this, arguments); })');

      delegateClassDesc.addInstanceMethodWithSelector_function_(selector, dynamicFunction);
    }
  };

  this.removeHandlerForSelector = function (selectorString) {
    delete handlers[selectorString];
  };

  this.getHandlerForSelector = function (selectorString) {
    return handlers[selectorString];
  };

  this.getAllHandlers = function () {
    return handlers;
  };

  this.getClass = function () {
    return NSClassFromString(uniqueClassName);
  };

  this.getClassInstance = function () {
    return NSClassFromString(uniqueClassName).new();
  };

  // Convenience
  if (typeof selectorHandlerDict === 'object') {
    for (var selectorString in selectorHandlerDict) {
      this.setHandlerForSelector(selectorString, selectorHandlerDict[selectorString]);
    }
  }
};

var parseQuery = function (query) {
  query = query.split('?')[1];
  if (!query) {
    return;
  }
  query = query.split('&').reduce(function (prev, s) {
    var res = s.split('=');
    if (res.length === 2) {
      prev[decodeURIComponent(res[0])] = decodeURIComponent(res[1]);
    }
    return prev;
  }, {});
  return query;
};

/* globals NSUUID NSThread NSPanel NSMakeRect NSTexturedBackgroundWindowMask NSTitledWindowMask NSClosableWindowMask NSColor NSWindowMiniaturizeButton NSWindowZoomButton NSFloatingWindowLevel WebView COScript */

var coScript = COScript.currentCOScript();
var LOCATION_CHANGED = 'webView:didChangeLocationWithinPageForFrame:';

function WebUI(context, htmlName, options) {
  // ColorPicker main window
  var identifier = options.identifier || NSUUID.UUID().UUIDString();
  var threadDictionary = NSThread.mainThread().threadDictionary();
  var backgroundColor = options.background || NSColor.whiteColor();
  var panel = threadDictionary[identifier] ? threadDictionary[identifier] : NSPanel.alloc().init();

  // Window size
  panel.setFrame_display(NSMakeRect(options.x || 0, options.y || 0, options.width || 240, options.height || 180), true);

  panel.setStyleMask(options.styleMask || NSTexturedBackgroundWindowMask | NSTitledWindowMask | NSClosableWindowMask);
  panel.setBackgroundColor(backgroundColor);

  if (options.onlyShowCloseButton) {
    panel.standardWindowButton(NSWindowMiniaturizeButton).setHidden(true);
    panel.standardWindowButton(NSWindowZoomButton).setHidden(true);
  }

  // Titlebar
  panel.setTitle(options.title || context.plugin.name());
  if (options.hideTitleBar) {
    panel.setTitlebarAppearsTransparent(true);
  }

  panel.becomeKeyWindow();
  panel.setLevel(NSFloatingWindowLevel);

  threadDictionary[identifier] = panel;

  if (options.shouldKeepAround !== false) {
    // Long-running script
    coScript.setShouldKeepAround(true);
  }

  // Add Web View to window
  var webView = WebView.alloc().initWithFrame(NSMakeRect(0, options.hideTitleBar ? -24 : 0, options.width || 240, (options.height || 180) - (options.hideTitleBar ? 0 : 24)));

  if (options.frameLoadDelegate || options.handlers) {
    var handlers = options.frameLoadDelegate || {};
    if (options.handlers) {
      var lastQueryId;
      handlers[LOCATION_CHANGED] = function (webview, frame) {
        var query = webview.windowScriptObject().evaluateWebScript('window.location.hash');
        query = parseQuery(query);
        if (query.pluginAction && query.actionId && query.actionId !== lastQueryId && query.pluginAction in options.handlers) {
          lastQueryId = query.actionId;
          try {
            query.pluginArgs = JSON.parse(query.pluginArgs);
          } catch (err) {}
          options.handlers[query.pluginAction].apply(context, query.pluginArgs);
        }
      };
    }
    var frameLoadDelegate = new index$1(handlers);
    webView.setFrameLoadDelegate_(frameLoadDelegate.getClassInstance());
  }
  if (options.uiDelegate) {
    var uiDelegate = new index$1(options.uiDelegate);
    webView.setUIDelegate_(uiDelegate.getClassInstance());
  }

  webView.setOpaque(true);
  webView.setBackgroundColor(backgroundColor);
  webView.setMainFrameURL_(context.plugin.urlForResourceNamed(htmlName).path());

  panel.contentView().addSubview(webView);
  panel.center();
  panel.makeKeyAndOrderFront(null);

  return {
    panel: panel,
    eval: webView.stringByEvaluatingJavaScriptFromString,
    webView: webView
  };
}

WebUI.clean = function () {
  coScript.setShouldKeepAround(false);
};

var index = WebUI;

var kUUIDKey = 'google.analytics.uuid';
var uuid = NSUserDefaults.standardUserDefaults().objectForKey(kUUIDKey);
if (!uuid) {
  uuid = NSUUID.UUID().UUIDString();
  NSUserDefaults.standardUserDefaults().setObject_forKey(uuid, kUUIDKey);
}

function jsonToQueryString(json) {
  return '?' + Object.keys(json).map(function (key) {
    return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);
  }).join('&');
}

var index$3 = function (context, trackingId, hitType, props) {
  var payload = {
    v: 1,
    tid: trackingId,
    ds: 'Sketch%20' + NSBundle.mainBundle().objectForInfoDictionaryKey("CFBundleShortVersionString"),
    cid: uuid,
    t: hitType,
    an: context.plugin.name(),
    aid: context.plugin.identifier(),
    av: context.plugin.version()
  };
  if (props) {
    Object.keys(props).forEach(function (key) {
      payload[key] = props[key];
    });
  }

  var url = NSURL.URLWithString(NSString.stringWithFormat("https://www.google-analytics.com/collect%@", jsonToQueryString(payload)));

  if (url) {
    NSURLSession.sharedSession().dataTaskWithURL(url).resume();
  }
};

// import prefsManager from 'sketch-module-user-preferences'
const SUITE_PREFIX = 'com.kevinwoodhouse.';
const pluginName = 'SketchNudged';
const defaultPrefs = {
  SendAnalytics: true,
  CustomNudgedValue: 20
};

function isPresent(data) {
  return data != null;
}

function getUserPreferences() {
  var prefs = {};
  var store = NSUserDefaults.alloc().initWithSuiteName(SUITE_PREFIX + pluginName);
  Object.keys(defaultPrefs).forEach(function (k) {
    //log('[NUDGED] key: ' + k)
    if (typeof defaultPrefs[k] === 'boolean') {
      prefs[k] = isPresent(store.objectForKey(k)) ? Boolean(store.boolForKey(k)) : defaultPrefs[k];
    } else if (typeof defaultPrefs[k] === 'number') {
      prefs[k] = isPresent(store.objectForKey(k)) ? store.doubleForKey(k) : defaultPrefs[k];
    } else if (typeof defaultPrefs[k] === 'string') {
      prefs[k] = isPresent(store.objectForKey(k)) ? store.stringForKey(k) : defaultPrefs[k];
    } else if (Array.isArray(defaultPrefs[k])) {
      prefs[k] = isPresent(store.objectForKey(k)) ? store.arrayForKey(k) : defaultPrefs[k];
    } else {
      prefs[k] = isPresent(store.objectForKey(k)) ? store.dictionaryForKey(k) : defaultPrefs[k];
    }
  });
  //log('[NUDGED] defprefs: ' + Object.keys(defaultPrefs))
  //log('[NUDGED] defVals: ' + Object.keys(defaultPrefs).map(k => defaultPrefs[k]))
  //log('[NUDGED] prefs: ' + Object.keys(prefs))
  //log('[NUDGED] Vals: ' + Object.keys(prefs).map(k => prefs[k]))
  return prefs;
}



function setUserPreferences(prefs) {
  log('[NUDGED] saving prefs: ' + Object.keys(prefs));
  log('[NUDGED] saving prefs: ' + Object.keys(prefs).map(k => prefs[k]));
  var store = NSUserDefaults.alloc().initWithSuiteName(SUITE_PREFIX + pluginName);
  Object.keys(prefs).forEach(function (k) {
    if (typeof prefs[k] === 'boolean') {
      store.setBool_forKey(prefs[k], k);
    } else if (typeof prefs[k] === 'number') {
      store.setDouble_forKey(prefs[k], k);
    } else {
      store.setObject_forKey(prefs[k], k);
    }
  });
  store.synchronize();
}

//.......................................//


// general functions
function userDefaultsFromKey(key) {
  return NSUserDefaults.standardUserDefaults().objectForKey(key);
}

const gaID = 'UA-90355443-2';
const { SendAnalytics } = getUserPreferences();
log('[ Nudged ] - SendAnalytics? ' + SendAnalytics);

function sendEvent(context, category, action, label, value) {
  log('[ Nudged ] - SendAnalytics? ' + SendAnalytics);
  if (!SendAnalytics) {
    log('[ Nudged ] - SendAnalytics = false... not sending!');
    return;
  }
  const payload = {};
  if (category) {
    payload.ec = category;
  }
  if (action) {
    payload.ea = action;
  }
  if (label) {
    payload.el = label;
  }
  if (value) {
    payload.ev = value;
  }
  return index$3(context, gaID, 'event', payload);
}



function sendScreenView(context, screenName) {
  if (!SendAnalytics) {
    return;
  }
  const payload = {};
  if (screenName) {
    payload.cd = screenName;
  }
  return index$3(context, gaID, 'screenview', payload);
}

function openUrlInBrowser(url, ref = null) {
  log('[ Nudged ] -- openUrlInBrowser');
  if (ref) {
    var refURL = url + '?ref=' + ref;
    NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(refURL));
  } else {
    NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(url));
  }
}

// color funcs


function hexToNSColor(hex) {
  var r = parseInt(hex.substring(0, 2), 16) / 255,
      g = parseInt(hex.substring(2, 4), 16) / 255,
      b = parseInt(hex.substring(4, 6), 16) / 255,
      a = 1;
  return NSColor.colorWithRed_green_blue_alpha(r, g, b, a);
}

// hash tools

//.......................................//

// OnRun
var onRun = function (context) {
  let prefs = getUserPreferences();
  let { CustomNudgedValue } = getUserPreferences();

  let nudgeValues = {
    small: userDefaultsFromKey('nudgeDistanceSmall'),
    big: userDefaultsFromKey('nudgeDistanceBig'),
    custom: CustomNudgedValue
  };

  const PluginConfig = {
    pluginWidth: 272,
    pluginHeight: 324,
    pluginWindowColor: 'EFEFEF'
  };

  const pluginRef = context.plugin.name() + context.plugin.version();
  sendScreenView(context, 'home');

  // create options for plugin window
  const options = {
    identifier: context.plugin.identifier(), // to reuse the UI
    x: 0,
    y: 0,
    width: PluginConfig.pluginWidth,
    height: PluginConfig.pluginHeight,
    background: hexToNSColor(PluginConfig.pluginWindowColor),
    onlyShowCloseButton: true,
    title: ' ',
    hideTitleBar: false,
    shouldKeepAround: true,
    frameLoadDelegate: {
      'webView:didFinishLoadForFrame:': function (webView, webFrame) {
        let setLocationHash = 'window.location.hash = "small=' + nudgeValues.small + '&big=' + nudgeValues.big + '&custom=' + nudgeValues.custom + '"';
        webUI.eval(setLocationHash);
      }
    },
    uiDelegate: {
      // https://developer.apple.com/reference/webkit/webuidelegate?language=objc
    }
  };

  // add new handlers
  options.handlers = {
    saveNudgedValues: function (inputData) {
      saveNudgedValues(inputData);
    },
    webLinkClicked: function (url) {
      openUrlInBrowser(url, pluginRef);
      sendEvent(context, 'URL', url, 'Link Clicked');
    },
    applyButtonWasClicked: function (data) {
      sendEvent(context, 'UI', 'Apply', 'Apply Button Clicked');
      saveNudgedValues(data);
    },
    resetButtonWasClicked: function (data) {
      sendEvent(context, 'UI', 'Reset', 'Reset Button Clicked');
      resetNudgeValues(data);
    },
    trackEvent: function (category, action, label, value) {
      sendEvent(context, category, action, label, value);
    },
    trackScreenView: function (screenName) {
      sendScreenView(context, screenName);
    },
    nativeLog: function (logMessage) {
      log('[ Nudged ] - ' + logMessage);
    }
  };
  // using index.html from Resources
  const webUI = new index(context, 'index.html', options);

  // saveNudgedValues
  function saveNudgedValues(data) {
    let sketchApp = context.api().Application();
    sketchApp.setSettingForKey('nudgeDistanceSmall', data.small);
    sketchApp.setSettingForKey('nudgeDistanceBig', data.big);
    setUserPreferences({ CustomNudgedValue: data.custom });
    context.document.showMessage('🄽 Saved Small = ' + data.small + ' Big = ' + data.big + ' Custom = ' + data.custom);
    webUI.panel.close();
    index.clear();
  }

  function resetNudgeValues(data) {
    // Future placeholder not used yet.
  }
};

//.......................................//

var visitNudgedWebsite = function (context) {
  const pluginRef = context.plugin.name() + context.plugin.version();
  var url = 'https://kevinwoodhouse.github.io/sketch-nudged/';
  sendEvent(context, 'Sketch Menu', url, 'Menu Clicked');
  openUrlInBrowser(url, pluginRef);
};

var visitNudgedTwitter = function (context) {
  const pluginRef = context.plugin.name() + context.plugin.version();
  var url = 'https://twitter.com/SketchNudged/';
  sendEvent(context, 'Sketch Menu', url, 'Menu Clicked');
  openUrlInBrowser(url, pluginRef);
};

// RESET NUDGE - KEY / MENU
var resetNudgeValues = function (context) {
  // defaults
  let defaultNudgeValues = {
    small: 1,
    big: 10,
    custom: 20
  };
  let sketchApp = context.api().Application();
  sketchApp.setSettingForKey('nudgeDistanceSmall', defaultNudgeValues.small);
  sketchApp.setSettingForKey('nudgeDistanceBig', defaultNudgeValues.big);
  setUserPreferences({ CustomNudgedValue: defaultNudgeValues.custom });
  context.document.showMessage('🄽 Default: Small = ' + defaultNudgeValues.small + '  Big = ' + defaultNudgeValues.big + '  Custom = ' + defaultNudgeValues.custom);
};

// CUSTOM NUDGE
var customNudgeUp = function (context) {
  performCustomNudge(context, 'Up');
};

var customNudgeDown = function (context) {
  performCustomNudge(context, 'Down');
};

var customNudgeLeft = function (context) {
  performCustomNudge(context, 'Left');
};

var customNudgeRight = function (context) {
  performCustomNudge(context, 'Right');
};

function performCustomNudge(context, nudgeDirection) {
  let document = context.document;
  let selectedLayers = context.selection;
  let selectedLayersCount = selectedLayers.count();
  if (selectedLayersCount == 0) {
    context.document.showMessage('🄽 No Layer(s) Selected');
  } else {
    let { CustomNudgedValue } = getUserPreferences();
    let nudgeValue = CustomNudgedValue;
    let layer;
    for (var i = 0; i < selectedLayersCount; i++) {
      layer = selectedLayers[i];
      switch (nudgeDirection) {
        case 'Up':
          layer.frame().setY(parseFloat(layer.frame().y()) - parseFloat(nudgeValue));
          break;
        case 'Down':
          layer.frame().setY(parseFloat(layer.frame().y()) + parseFloat(nudgeValue));
          break;
        case 'Left':
          layer.frame().setX(parseFloat(layer.frame().x()) - parseFloat(nudgeValue));
          break;
        case 'Right':
          layer.frame().setX(parseFloat(layer.frame().x()) + parseFloat(nudgeValue));
          break;
        default:
      }
    }
    document.reloadInspector();
  }
}
